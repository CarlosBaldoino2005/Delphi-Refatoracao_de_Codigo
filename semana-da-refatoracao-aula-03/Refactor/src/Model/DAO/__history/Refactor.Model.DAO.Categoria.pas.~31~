unit Refactor.Model.DAO.Categoria;

interface

uses
  FireDAC.Stan.Intf,
  FireDAC.Stan.Option,
  FireDAC.Stan.Error,
  FireDAC.UI.Intf,
  FireDAC.Phys.Intf,
  FireDAC.Stan.Def,
  FireDAC.Stan.Pool,
  FireDAC.Stan.Async,
  FireDAC.Phys,
  FireDAC.Phys.SQLite,
  FireDAC.Phys.SQLiteDef,
  FireDAC.Stan.ExprFuncs,
  FireDAC.Phys.SQLiteWrapper.Stat,
  FireDAC.VCLUI.Wait,
  Data.DB,
  FireDAC.Comp.Client,
  Refactor.Model.Entities.Categoria;

type
  TModelDAOCategoria = class
    private
      FConnection : TFDConnection;
      FQuery : TFDQuery;
      FDataSet : TDataSource;
      FEntity : TCategoria;
    public
      constructor Create( aConnection : TFDConnection);
      destructor Destroy; override;
      function Get : TModelDAOCategoria;
      function Insert : TModelDAOCategoria;
      function Update : TModelDAOCategoria;
      function Delete : TModelDAOCategoria;
      function DataSet ( aValue : TDataSource ) : TModelDAOCategoria;
      function This : TCategoria;
  end;

implementation

uses
  System.SysUtils;

{ TModelDAOCategoria }

constructor TModelDAOCategoria.Create( aConnection : TFDConnection);
begin
  FConnection := aConnection;
  FQuery := TFDQuery.Create(nil);
  FQuery.Connection := FConnection;
  FEntity := TCategoria.Create;
end;

function TModelDAOCategoria.DataSet(aValue: TDataSource): TModelDAOCategoria;
begin
  Result := Self;
  FDataSet := aValue;
  FDataSet.DataSet := FQuery;
end;

function TModelDAOCategoria.Delete: TModelDAOCategoria;
begin
  Result := Self;
  try
    FQuery.Active := false;
    FQuery.SQL.Clear;
    FQuery.SQL.Add('DELETE FROM TAB_CATEGORIA');
    FQuery.SQL.Add('WHERE ID_CATEGORIA = :ID_CATEGORIA');
    FQuery.ParamByName('ID_CATEGORIA').Value := FEntity.ID_CATEGORIA;
    FQuery.ExecSQL;
  except on ex:exception do
    raise Exception.Create('Erro ao Excluir Categorias: ' + ex.Message);
  end;
end;

destructor TModelDAOCategoria.Destroy;
begin
  FQuery.DisposeOf;
  FEntity.DisposeOf;
  inherited;
end;

function TModelDAOCategoria.Get: TModelDAOCategoria;
begin
  Result := Self;
  try
    FQuery.Active := false;
    FQuery.sql.Clear;
    FQuery.sql.Add('SELECT * FROM TAB_CATEGORIA');
    FQuery.sql.Add('WHERE 1 = 1');
  //        if ID_CATEGORIA > 0 then
  //        begin
  //            SQL.Add('AND ID_CATEGORIA = :ID_CATEGORIA');
  //            ParamByName('ID_CATEGORIA').Value := ID_CATEGORIA;
  //        end;
    FQuery.Active := true;
  except on ex:exception do
    raise Exception.Create('Erro ao Consultar Categorias: ' + ex.Message);
  end;
end;

function TModelDAOCategoria.Insert: TModelDAOCategoria;
begin
  Result := Self;
  try
    FQuery.Active := false;
    FQuery.SQL.Clear;
    FQuery.SQL.Add('INSERT INTO TAB_CATEGORIA(DESCRICAO, ICONE, INDICE_ICONE)');
    FQuery.SQL.Add('VALUES(:DESCRICAO, :ICONE, :INDICE_ICONE)');
    FQuery.ParamByName('DESCRICAO').Value := FEntity.DESCRICAO;
    FQuery.ParamByName('ICONE').Assign(FEntity.ICONE);
    FQuery.ParamByName('INDICE_ICONE').Value := FEntity.INDICE_ICONE;
    FQuery.ExecSQL;
  except on ex:exception do
    raise Exception.Create('Erro ao inserir categorias: ' + ex.Message);
  end;
end;

function TModelDAOCategoria.This: TCategoria;
begin
  Result := FEntity;
end;

function TModelDAOCategoria.Update: TModelDAOCategoria;
begin
  Result := Self;
  try
    FQuery.Active := false;
    FQuery.SQL.Clear;
    FQuery.SQL.Add('UPDATE TAB_CATEGORIA SET DESCRICAO=:DESCRICAO, ICONE=:ICONE,');
    FQuery.SQL.Add('INDICE_ICONE=:INDICE_ICONE');
    FQuery.SQL.Add('WHERE ID_CATEGORIA = :ID_CATEGORIA');
    FQuery.ParamByName('DESCRICAO').Value := FEntity.DESCRICAO;
    FQuery.ParamByName('ICONE').Assign(FEntity.ICONE);
    FQuery.ParamByName('ID_CATEGORIA').Value := FEntity.ID_CATEGORIA;
    FQuery.ParamByName('INDICE_ICONE').Value := FEntity.INDICE_ICONE;
    FQuery.ExecSQL;
  except on ex:exception do
    raise Exception.Create('Erro ao alterar categorias: ' + ex.Message);
  end;
end;

end.
